变体：10746

```assembly
ORG 0x0000
; Таблица векторов прерываний
V0: WORD $default, 0x0180    ; Вектор 0 (по умолчанию)
V1: WORD $int1,    0x0180    ; Вектор 1 (ВУ-3: вывод F(X))
V2: WORD $int2,    0x0180    ; Вектор 2 (ВУ-2: маскирование)
V3: WORD $default, 0x0180    ; Векторы 3-7 не используются
V4: WORD $default, 0x0180
V5: WORD $default, 0x0180
V6: WORD $default, 0x0180
V7: WORD $default, 0x0180

ORG 0x0012
; Область данных
X:      WORD ?               ; Основная переменная (адрес 0x023)
min:    WORD 0xFFD4          ; -44, минимальное значение ОДЗ
max:    WORD 0x0028          ; +40, максимальное значение ОДЗ
temp:   WORD ?               ; Временная переменная

ORG 0x0017
; ===============================================
; ОСНОВНАЯ ПРОГРАММА
; ===============================================
START:  DI                   ; Запрет всех прерываний
        CLA                  ; Очистка аккумулятора
        
        ; Инициализация системы прерываний
        OUT 0x01             ; Запрет INT для ВУ 0
        OUT 0x07             ; Запрет INT для ВУ 3
        OUT 0x0B             ; Запрет INT для ВУ 4
        OUT 0x0D             ; Запрет INT для ВУ 5
        OUT 0x11             ; Запрет INT для ВУ 6
        OUT 0x15             ; Запрет INT для ВУ 7
        
        LD #0x09             ; MR = 1001 (разрешение для ВУ-3)
        OUT 0x03             ; Установка маски для ВУ-1
        
        LD #0x0A             ; MR = 1010 (разрешение для ВУ-2)  
        OUT 0x05             ; Установка маски для ВУ-2
        
        LD #0                ; Инициализация X = 0
        ST X
        
        EI                   ; Разрешение прерываний

; ===============================================
; ОСНОВНОЙ ЦИКЛ: X = X + 2
; ===============================================
main:   DI                   ; Атомарная операция
        LD X                 ; AC = X
        ADD #2               ; AC = X + 2
        CALL check           ; Проверка и коррекция ОДЗ
        ST X                 ; X = AC (скорректированное)
        EI                   ; Разрешение прерываний
        
        ; Небольшая задержка (имитация)
        NOP
        NOP
        
        JUMP main            ; Повтор цикла

; ===============================================
; ОБРАБОТЧИК ПРЕРЫВАНИЯ ВУ-3: F(X) = 3X + 5
; ===============================================
int1:   DI                   ; Запрет прерываний
        LD X                 ; AC = X
        
        ; Вычисление 3X
        ASL                  ; AC = 2X
        ADD X                ; AC = 2X + X = 3X
        
        ; Добавление константы
        ADD #5               ; AC = 3X + 5
        
        ; Вывод результата
        OUT 0x02             ; Вывод на ВУ-3
        
        EI                   ; Разрешение прерываний
        IRET                 ; Возврат из прерывания

; ===============================================
; ОБРАБОТЧИК ПРЕРЫВАНИЯ ВУ-2: МАСКИРОВАНИЕ
; ===============================================
int2:   DI                   ; Запрет прерываний
        
        ; Чтение РД ВУ-2 и маскирование
        IN 0x04              ; AC = РД_ВУ2 (8-битное знаковое)
        AND #0x1F            ; Оставить 5 младших битов
        ST temp              ; Сохранить маскированный РД
        
        ; Маскирование X
        LD X                 ; AC = X
        AND #0x1F            ; Оставить 5 младших битов X
        
        ; Побитовое И между маскированными значениями
        AND temp             ; AC = (X & 0x1F) & (РД & 0x1F)
        
        ; Проверка ОДЗ и сохранение
        CALL check           ; Проверка результата
        ST X                 ; Сохранить результат в X
        
        EI                   ; Разрешение прерываний
        IRET                 ; Возврат из прерывания

; ===============================================
; ПОДПРОГРАММА ПРОВЕРКИ ОДЗ
; Вход: AC = проверяемое значение
; Выход: AC = скорректированное значение
; ===============================================
check:  CMP min              ; Сравнить с минимумом
        BPL check_max        ; Если >= min, проверить максимум
        LD min               ; AC = min (коррекция)
        JUMP check_end
        
check_max:
        CMP max              ; Сравнить с максимумом  
        BMI check_end        ; Если <= max, коррекция не нужна
        LD min               ; AC = min (коррекция при превышении)
        
check_end:
        RET                  ; Возврат

; ===============================================
; ОБРАБОТЧИК ПРЕРЫВАНИЙ ПО УМОЛЧАНИЮ
; ===============================================
default: IRET                ; Игнорировать необрабатываемые прерывания

END START
```