变体：10746

```assembly
ORG 0x0000
; Таблица векторов прерываний
V0: WORD $default, 0x0180    ; Вектор 0 (по умолчанию)
V1: WORD $int1,    0x0180    ; Вектор 1 (ВУ-3: вывод F(X))
V2: WORD $int2,    0x0180    ; Вектор 2 (ВУ-2: маскирование)
V3: WORD $default, 0x0180    ; Векторы 3-7 не используются
V4: WORD $default, 0x0180
V5: WORD $default, 0x0180
V6: WORD $default, 0x0180
V7: WORD $default, 0x0180

ORG 0x0012
; Область данных
X:      WORD ?               ; Основная переменная (адрес 0x023)
min:    WORD 0xFFD4          ; -44, минимальное значение ОДЗ
max:    WORD 0x0028          ; +40, максимальное значение ОДЗ
temp:   WORD ?               ; Временная переменная

ORG 0x0017
; ===============================================
; ОСНОВНАЯ ПРОГРАММА
; ===============================================
START:  DI                   ; Запрет всех прерываний
        CLA                  ; Очистка аккумулятора
        
        ; Инициализация системы прерываний
        OUT 0x01             ; Запрет INT для ВУ 0
        OUT 0x07             ; Запрет INT для ВУ 3
        OUT 0x0B             ; Запрет INT для ВУ 4
        OUT 0x0D             ; Запрет INT для ВУ 5
        OUT 0x11             ; Запрет INT для ВУ 6
        OUT 0x15             ; Запрет INT для ВУ 7
        
        LD #0x09             ; MR = 1001 (разрешение для ВУ-3)
        OUT 0x03             ; Установка маски для ВУ-1
        
        LD #0x0A             ; MR = 1010 (разрешение для ВУ-2)  
        OUT 0x05             ; Установка маски для ВУ-2
        
        LD #0                ; Инициализация X = 0
        ST X
        
        EI                   ; Разрешение прерываний

; ===============================================
; ОСНОВНОЙ ЦИКЛ: X = X + 2
; ===============================================
main:   DI                   ; Атомарная операция
        LD X                 ; AC = X
        ADD #2               ; AC = X + 2
        CALL check           ; Проверка и коррекция ОДЗ
        ST X                 ; X = AC (скорректированное)
        EI                   ; Разрешение прерываний
        
        ; Небольшая задержка (имитация)
        NOP
        NOP
        
        JUMP main            ; Повтор цикла

; ===============================================
; ОБРАБОТЧИК ПРЕРЫВАНИЯ ВУ-3: F(X) = 3X + 5
; ===============================================
int1:   DI                   ; Запрет прерываний
        LD X                 ; AC = X
        
        ; Вычисление 3X
        ASL                  ; AC = 2X
        ADD X                ; AC = 2X + X = 3X
        
        ; Добавление константы
        ADD #5               ; AC = 3X + 5
        
        ; Вывод результата
        OUT 0x02             ; Вывод на ВУ-3
        
        EI                   ; Разрешение прерываний
        IRET                 ; Возврат из прерывания

; ===============================================
; ОБРАБОТЧИК ПРЕРЫВАНИЯ ВУ-2: МАСКИРОВАНИЕ
; ===============================================
int2:   DI                   ; Запрет прерываний
        
        ; Чтение РД ВУ-2 и маскирование
        IN 0x04              ; AC = РД_ВУ2 (8-битное знаковое)
        AND #0x1F            ; Оставить 5 младших битов
        ST temp              ; Сохранить маскированный РД
        
        ; Маскирование X
        LD X                 ; AC = X
        AND #0x1F            ; Оставить 5 младших битов X
        
        ; Побитовое И между маскированными значениями
        AND temp             ; AC = (X & 0x1F) & (РД & 0x1F)
        
        ; Проверка ОДЗ и сохранение
        CALL check           ; Проверка результата
        ST X                 ; Сохранить результат в X
        
        EI                   ; Разрешение прерываний
        IRET                 ; Возврат из прерывания

; ===============================================
; ПОДПРОГРАММА ПРОВЕРКИ ОДЗ
; Вход: AC = проверяемое значение
; Выход: AC = скорректированное значение
; ===============================================
check:  CMP min              ; Сравнить с минимумом
        BPL check_max        ; Если >= min, проверить максимум
        LD min               ; AC = min (коррекция)
        JUMP check_end
        
check_max:
        CMP max              ; Сравнить с максимумом  
        BMI check_end        ; Если <= max, коррекция не нужна
        LD min               ; AC = min (коррекция при превышении)
        
check_end:
        RET                  ; Возврат

; ===============================================
; ОБРАБОТЧИК ПРЕРЫВАНИЙ ПО УМОЛЧАНИЮ
; ===============================================
default: IRET                ; Игнорировать необрабатываемые прерывания

END START
```


### 原1074变体
```assembly
ORG 0x0

V0: WORD $default, 0X180
V1: WORD $default, 0X180  
V2: WORD $int2,    0X180    ; Обработчик прерывания ВУ-2
V3: WORD $int3,    0x180    ; Обработчик прерывания ВУ-3
V4: WORD $default, 0X180
V5: WORD $default, 0X180
V6: WORD $default, 0X180
V7: WORD $default, 0X180

ORG 0x008               ; Адрес переменной X  
X: WORD ?
temp: WORD ?
max: WORD 0x001E               ; Максимальное значение
min: WORD 0xFFDF              ; Минимальное значение
default:    IRET

START:      
            DI              ; Запрет прерываний
            CLA           ; Очистка аккумулятора
            
            OUT 0x1         ; ВУ-0
            OUT 0x5         ; ВУ-1  
            OUT 0x11        ; ВУ-4
            OUT 0x15        ; ВУ-5
            OUT 0x19        ; ВУ-6
            OUT 0x1D        ; ВУ-7
          
            LD #0xA         ; MR = 1010 (бит разрешения=1, бит готовности=0)
            OUT 0x9         ; Регистр управления ВУ-2

            LD #0xA         ; MR = 1010
            OUT 0xD        ; Регистр управления ВУ-3
            
            ST X
            
            EI              ; Разрешение прерываний
main:       
            DI              ; Запрет прерываний для атомарности
            LD X            ; Загружаем X
            SUB #2          ; X = X - 2 (уменьшаем на 2)
            CALL check      ; Проверяем границы
            ST X            ; Сохраняем X
            NOP
            EI              ; Включаем прерывания
            JUMP main       ; Продолжаем цикл

int3:       
            DI              ; Запрет прерываний
            LD X            ; Загружаем X
            ASL             ; X * 2 (сдвиг влево на 1 бит)
            ASL             ; X * 4 (сдвиг влево на 1 бит)  
            NEG             ; X * (-4) (инвертируем знак)
            SUB #8          ; -4X - 8
            OUT 0xE         ; Вывод в регистр данных ВУ-3
            NOP
            EI              ; Включаем прерывания
            IRET            ; Возврат из прерывания

int2:       
            DI              ; Запрет прерываний
            IN 0xA          ; Читаем регистр данных ВУ-2
            AND #0x0F       ; Оставляем младшие 4 бита
            ST temp         ; Временно сохраняем
            
            LD X            ; Загружаем X  
            AND #0x0F       ;  Младшие 4 бита X
            OR temp         ; OR с младшими 4 битами данных ВУ-2
            CALL check      ; Проверяем границы
            ST X            ; Сохраняем результат в X
            NOP
            EI              ; Включаем прерывания  
            IRET            ; Возврат из прерывания

check:                      
check_min:  
            CMP min         ; Сравниваем с минимальным значением
            BPL check_max   ; Если >= min, проверяем максимум
            LD max          ; Иначе загружаем максимальное значение
            JUMP check_end  ; Переходим к концу
            
check_max:  
            CMP max         ; Сравниваем с максимальным значением  
            BMI check_end   ; Если < max, значение корректно
            LD max          ; Иначе загружаем максимальное значение
            
check_end:  
            RET             ; Возврат
```


### 报告
检查程序的方法中：
最后的关于输入输出设备1-3的中断情况  
以及主程序中，应选取临界值情况进行测试，以便测试程序的边界情况。


```asm
ORG 0x0
V0: WORD $default, 0X180
V1: WORD $int1,    0X180
V2: WORD $int2,    0X180
V3: WORD $default, 0x180
V4: WORD $default, 0X180
V5: WORD $default, 0X180
V6: WORD $default, 0X180
V7: WORD $default, 0X180

ORG 0x008
X: WORD ?

max: WORD 0x001E 		; 30, максимальное значение Х
min: WORD 0XFFDF 		; -33, минимальное значение Х
default:    IRET 		; Обработка прерывания по умолчанию


START:  	DI
    		CLA
    		OUT 0x1 	; Запрет прерываний для неиспользуемых ВУ
   		OUT 0x7
    		OUT 0xB
    		OUT 0xD
    		OUT 0x11
    		OUT 0x15
    		OUT 0x19
    		OUT 0x1D
		LD #0x9	; Загрузка в аккумулятор MR (1000|0001=1001)
    		OUT 3 	; Разрешение прерываний для 1 ВУ
    		LD #0xA  	; Загрузка в аккумулятор MR (1000|0010=1010)
    		OUT 5 	; Разрешение прерываний для 2 ВУ
    		EI
main:   	DI 		; Запрет прерываний чтобы обеспечить атом. операции
   		LD X
    		SUB #2
   		CALL check
    		ST X
    		EI
    		JUMP main
int1: 	DI		; Обработка прерывания на ВУ-1
  		LD X
		NOP
    		ASL
		ASL
		NEG
            SUB #8      ; -4x - 8
    		OUT 2
                NOP
    		EI
    		IRET
int2:		DI		; Обработка прерывания на ВУ-2 DR-X -> X
    		IN 4
    		SUB X
            CALL check
    		ST X
   		NOP
    		EI
    		IRET

check:  			      ; Проверка принадлежности X к ОДЗ
check_min:	CMP min 		; Если x > min переход на проверку верхней границы
    		BPL check_max   
	LD max
   		JUMP return		; Иначе загрузка min в аккумулятор
check_max: 	CMP max 		; Проверка пересечения верхней границы X
    		BMI return  	; Если x < max переход
	LD max
return:	RET  			; Метка возврата из проверки на ОДЗ  

```